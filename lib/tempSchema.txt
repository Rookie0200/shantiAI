// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================================
// USER MANAGEMENT & AUTHENTICATION
// ================================

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String?  @unique
  firstName String?
  lastName  String?
  avatar    String?
  
  // Authentication
  password     String?
  emailVerified DateTime?
  isActive     Boolean @default(true)
  
  // Profile Information
  dateOfBirth DateTime?
  gender      Gender?
  timezone    String?
  language    String @default("en")
  
  // Subscription & Billing
  subscriptionTier SubscriptionTier @default(FREE)
  subscriptionId   String?
  customerId       String? // Stripe customer ID
  
  // Privacy & Preferences
  privacySettings Json?
  preferences     Json?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastLoginAt DateTime?
  
  // Relations
  accounts         Account[]
  sessions         Session[]
  moodEntries      MoodEntry[]
  journalEntries   JournalEntry[]
  goals            Goal[]
  activities       UserActivity[]
  chatSessions     ChatSession[]
  therapySessions  TherapySession[]
  assessments      Assessment[]
  notifications    Notification[]
  emergencyContacts EmergencyContact[]
  
  // Community
  posts           CommunityPost[]
  comments        Comment[]
  likes           Like[]
  follows         Follow[] @relation("UserFollows")
  followers       Follow[] @relation("UserFollowers")
  
  // Analytics
  analytics       UserAnalytics?
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// ================================
// MOOD TRACKING & MENTAL HEALTH
// ================================

model MoodEntry {
  id          String   @id @default(cuid())
  userId      String
  moodScore   Int      // 1-10 scale
  emotions    String[] // Array of emotion tags
  notes       String?
  triggers    String[] // What triggered this mood
  activities  String[] // What activities were done
  energy      Int?     // 1-10 energy level
  anxiety     Int?     // 1-10 anxiety level
  sleep       Int?     // Hours of sleep
  
  // Context
  weather     String?
  location    String?
  socialContext String? // alone, with_friends, family, etc.
  
  // Timestamps
  entryDate   DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("mood_entries")
}

model JournalEntry {
  id        String   @id @default(cuid())
  userId    String
  title     String?
  content   String   @db.Text
  mood      Int?     // Optional mood rating for this entry
  tags      String[]
  isPrivate Boolean  @default(true)
  
  // Prompts & Templates
  promptId  String?
  template  JournalTemplate?
  
  // AI Analysis
  sentiment Float?   // -1 to 1 sentiment score
  keywords  String[]
  aiInsights Json?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user   User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  prompt JournalPrompt? @relation(fields: [promptId], references: [id])
  
  @@map("journal_entries")
}

model JournalPrompt {
  id          String @id @default(cuid())
  title       String
  prompt      String @db.Text
  category    String
  difficulty  String // beginner, intermediate, advanced
  isActive    Boolean @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  entries JournalEntry[]
  
  @@map("journal_prompts")
}

// ================================
// GOALS & PROGRESS TRACKING
// ================================

model Goal {
  id          String     @id @default(cuid())
  userId      String
  title       String
  description String?    @db.Text
  category    GoalCategory
  priority    Priority   @default(MEDIUM)
  status      GoalStatus @default(ACTIVE)
  
  // Target & Progress
  targetValue Int
  currentValue Int @default(0)
  unit        String // days, sessions, minutes, etc.
  
  // Timeline
  startDate   DateTime @default(now())
  targetDate  DateTime
  completedAt DateTime?
  
  // Tracking
  isRecurring Boolean @default(false)
  frequency   String? // daily, weekly, monthly
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  milestones GoalMilestone[]
  
  @@map("goals")
}

model GoalMilestone {
  id          String   @id @default(cuid())
  goalId      String
  title       String
  description String?
  targetValue Int
  isCompleted Boolean  @default(false)
  completedAt DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  goal Goal @relation(fields: [goalId], references: [id], onDelete: Cascade)
  
  @@map("goal_milestones")
}

// ================================
// ACTIVITIES & EXERCISES
// ================================

model Activity {
  id          String       @id @default(cuid())
  title       String
  description String       @db.Text
  category    ActivityCategory
  type        ActivityType
  difficulty  Difficulty
  duration    Int          // in minutes
  
  // Content
  instructions String?     @db.Text
  audioUrl     String?
  videoUrl     String?
  imageUrl     String?
  
  // Metadata
  tags        String[]
  isActive    Boolean      @default(true)
  isPremium   Boolean      @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  userActivities UserActivity[]
  
  @@map("activities")
}

model UserActivity {
  id         String           @id @default(cuid())
  userId     String
  activityId String
  status     ActivityStatus   @default(NOT_STARTED)
  
  // Progress
  progress   Int              @default(0) // 0-100
  duration   Int?             // actual duration in minutes
  rating     Int?             // 1-5 stars
  notes      String?
  
  // Completion
  startedAt    DateTime?
  completedAt  DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  activity Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  
  @@map("user_activities")
}

// ================================
// AI CHAT & THERAPY SESSIONS
// ================================

model ChatSession {
  id        String   @id @default(cuid())
  userId    String
  title     String?
  
  // Session Context
  mood      Int?     // User's mood at start of session
  topic     String?  // Main topic discussed
  tags      String[]
  
  // AI Analysis
  sentiment Float?   // Overall sentiment of session
  insights  Json?    // AI-generated insights
  
  // Status
  isActive  Boolean  @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user     User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages ChatMessage[]
  
  @@map("chat_sessions")
}

model ChatMessage {
  id            String      @id @default(cuid())
  sessionId     String
  role          MessageRole // user, assistant, system
  content       String      @db.Text
  
  // AI Metadata
  model         String?     // AI model used
  tokens        Int?        // Token count
  confidence    Float?      // AI confidence score
  
  // Analysis
  sentiment     Float?      // Message sentiment
  emotions      String[]    // Detected emotions
  
  createdAt DateTime @default(now())
  
  session ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  @@map("chat_messages")
}

model TherapySession {
  id          String        @id @default(cuid())
  userId      String
  type        SessionType   // individual, group, crisis
  status      SessionStatus @default(SCHEDULED)
  
  // Session Details
  title       String?
  description String?       @db.Text
  duration    Int           // in minutes
  
  // Scheduling
  scheduledAt DateTime
  startedAt   DateTime?
  endedAt     DateTime?
  
  // Therapist (if human therapist)
  therapistId String?
  
  // Notes & Outcomes
  notes       String?       @db.Text
  homework    String?       @db.Text
  nextSteps   String?       @db.Text
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("therapy_sessions")
}

// ================================
// ASSESSMENTS & SCREENING
// ================================

model Assessment {
  id          String           @id @default(cuid())
  userId      String
  type        AssessmentType
  title       String
  description String?          @db.Text
  
  // Results
  score       Float?
  results     Json             // Detailed results
  
  // Recommendations
  recommendations String?      @db.Text
  riskLevel      RiskLevel?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("assessments")
}

// ================================
// CRISIS SUPPORT & EMERGENCY
// ================================

model EmergencyContact {
  id           String @id @default(cuid())
  userId       String
  name         String
  relationship String
  phoneNumber  String
  email        String?
  isPrimary    Boolean @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("emergency_contacts")
}

model CrisisEvent {
  id          String      @id @default(cuid())
  userId      String?     // Optional - anonymous crisis events
  type        CrisisType
  severity    Int         // 1-10 severity level
  description String?     @db.Text
  
  // Response
  status      CrisisStatus @default(ACTIVE)
  responder   String?     // Who responded
  resolution  String?     @db.Text
  
  // Location & Context
  location    String?
  triggers    String[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  resolvedAt DateTime?
  
  @@map("crisis_events")
}

// ================================
// COMMUNITY & SOCIAL FEATURES
// ================================

model CommunityPost {
  id          String    @id @default(cuid())
  userId      String
  title       String?
  content     String    @db.Text
  category    String
  tags        String[]
  isAnonymous Boolean   @default(false)
  isPublished Boolean   @default(true)
  
  // Moderation
  isModerated Boolean   @default(false)
  moderatedBy String?
  moderatedAt DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments Comment[]
  likes    Like[]
  
  @@map("community_posts")
}

model Comment {
  id       String  @id @default(cuid())
  userId   String
  postId   String
  content  String  @db.Text
  parentId String? // For nested comments
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user   User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   CommunityPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  parent Comment?      @relation("CommentReplies", fields: [parentId], references: [id])
  replies Comment[]    @relation("CommentReplies")
  likes  Like[]
  
  @@map("comments")
}

model Like {
  id        String    @id @default(cuid())
  userId    String
  postId    String?
  commentId String?
  
  createdAt DateTime @default(now())
  
  user    User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  post    CommunityPost? @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment Comment?       @relation(fields: [commentId], references: [id], onDelete: Cascade)
  
  @@unique([userId, postId])
  @@unique([userId, commentId])
  @@map("likes")
}

model Follow {
  id          String @id @default(cuid())
  followerId  String
  followingId String
  
  createdAt DateTime @default(now())
  
  follower  User @relation("UserFollows", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)
  
  @@unique([followerId, followingId])
  @@map("follows")
}

// ================================
// NOTIFICATIONS & COMMUNICATIONS
// ================================

model Notification {
  id      String           @id @default(cuid())
  userId  String
  type    NotificationType
  title   String
  message String           @db.Text
  data    Json?            // Additional data
  
  // Status
  isRead  Boolean @default(false)
  readAt  DateTime?
  
  // Delivery
  channels String[] // email, push, in_app
  sentAt   DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("notifications")
}

// ================================
// ANALYTICS & INSIGHTS
// ================================

model UserAnalytics {
  id     String @id @default(cuid())
  userId String @unique
  
  // Usage Statistics
  totalSessions      Int @default(0)
  totalMinutes       Int @default(0)
  streakDays         Int @default(0)
  longestStreak      Int @default(0)
  
  // Activity Breakdown
  meditationMinutes  Int @default(0)
  journalEntries     Int @default(0)
  moodEntries        Int @default(0)
  chatSessions       Int @default(0)
  
  // Progress Metrics
  averageMood        Float?
  moodTrend          Float? // Positive/negative trend
  stressLevel        Float?
  wellnessScore      Float?
  
  // Engagement
  lastActiveAt       DateTime?
  weeklyGoalsMet     Int @default(0)
  monthlyGoalsMet    Int @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_analytics")
}

model SystemAnalytics {
  id          String   @id @default(cuid())
  date        DateTime @unique @default(now())
  
  // User Metrics
  activeUsers       Int @default(0)
  newUsers          Int @default(0)
  retentionRate     Float?
  
  // Usage Metrics
  totalSessions     Int @default(0)
  averageSessionTime Float?
  
  // Feature Usage
  chatSessions      Int @default(0)
  moodEntries       Int @default(0)
  journalEntries    Int @default(0)
  activitiesCompleted Int @default(0)
  
  // Crisis Metrics
  crisisEvents      Int @default(0)
  crisisResolved    Int @default(0)
  
  createdAt DateTime @default(now())
  
  @@map("system_analytics")
}

// ================================
// CONTENT MANAGEMENT
// ================================

model Content {
  id          String      @id @default(cuid())
  type        ContentType
  title       String
  description String?     @db.Text
  content     String      @db.Text
  
  // Media
  imageUrl    String?
  audioUrl    String?
  videoUrl    String?
  
  // Metadata
  tags        String[]
  category    String
  difficulty  Difficulty?
  duration    Int?        // in minutes
  
  // Publishing
  isPublished Boolean     @default(false)
  publishedAt DateTime?
  
  // Access Control
  isPremium   Boolean     @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("content")
}

// ================================
// ENUMS
// ================================

enum Gender {
  MALE
  FEMALE
  NON_BINARY
  PREFER_NOT_TO_SAY
  OTHER
}

enum SubscriptionTier {
  FREE
  BASIC
  PREMIUM
  ENTERPRISE
}

enum GoalCategory {
  MENTAL_HEALTH
  PHYSICAL_HEALTH
  RELATIONSHIPS
  CAREER
  PERSONAL_GROWTH
  HABITS
  OTHER
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum GoalStatus {
  ACTIVE
  COMPLETED
  PAUSED
  CANCELLED
}

enum ActivityCategory {
  MEDITATION
  BREATHING
  MINDFULNESS
  JOURNALING
  EXERCISE
  SLEEP
  NUTRITION
  SOCIAL
  CREATIVE
  OTHER
}

enum ActivityType {
  GUIDED
  SELF_DIRECTED
  INTERACTIVE
  EDUCATIONAL
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum ActivityStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  SKIPPED
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

enum SessionType {
  INDIVIDUAL
  GROUP
  CRISIS
  ASSESSMENT
}

enum SessionStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum AssessmentType {
  DEPRESSION
  ANXIETY
  STRESS
  WELLBEING
  PERSONALITY
  RISK_ASSESSMENT
  CUSTOM
}

enum RiskLevel {
  LOW
  MODERATE
  HIGH
  CRITICAL
}

enum CrisisType {
  SUICIDAL_IDEATION
  PANIC_ATTACK
  SEVERE_DEPRESSION
  ANXIETY_CRISIS
  SUBSTANCE_ABUSE
  SELF_HARM
  OTHER
}

enum CrisisStatus {
  ACTIVE
  IN_PROGRESS
  RESOLVED
  ESCALATED
}

enum NotificationType {
  REMINDER
  ACHIEVEMENT
  GOAL_UPDATE
  CHAT_MESSAGE
  CRISIS_ALERT
  SYSTEM_UPDATE
  COMMUNITY_UPDATE
  APPOINTMENT
}

enum ContentType {
  ARTICLE
  VIDEO
  AUDIO
  MEDITATION
  EXERCISE
  COURSE
  RESOURCE
}

enum JournalTemplate {
  GRATITUDE
  REFLECTION
  GOAL_SETTING
  MOOD_TRACKING
  STRESS_RELIEF
  RELATIONSHIP
  CAREER
  FREE_FORM
}